# -*- coding: utf-8 -*-
"""NLP Stock Market Prediction And Forecasting Using Stacked LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12RZQnpK4bbWkhXwbrVe1y2R2aTgz64yT

#Stock Market Prediction And Forecasting Using Stacked LSTM
"""

import os 
import pandas_datareader as pdr
import numpy as np

key='34dd0eae8b7c53d81a996c5d1c3774827c011f50'
df=pdr.get_data_tiingo('AAPL',api_key=key)
df.head()

df.to_csv('AAPL.csv')

import pandas as pd
df=pd.read_csv('AAPL.csv')
df.head()

df.tail()

df.shape

##reset index
df1 = df.reset_index()['close']
df1

import matplotlib.pyplot as plt
plt.plot(df1)

df1

## LSTM are senstive to the scaleable data so, we apply MinMaxScaler
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))
df1

## splitting into testing & training
training_size =int(len(df1)*0.65)
test_size = len(df1) - training_size
train_data,test_data = df1[0 : training_size , : ] , df1[training_size : len(df1),:1]

training_size,test_size

train_data

#convert an array of values into a dataset_matrix
def create_dataset(dataset, time_step=1):
  data_x, data_y = [],[]
  for i in range(len(dataset) - time_step-1):
    a = dataset[i:(i+time_step), 0] # i=0,  0,1,2,3......99    =100
    data_x.append(a)
    data_y.append(dataset[i + time_step, 0]) 
  return np.array(data_x) , np.array(data_y)

##reshape into x=t,t+1,t+2,t+3 and y=t+4
time_step=100
x_train,y_train = create_dataset(train_data, time_step)
x_test,y_test = create_dataset(test_data, time_step)

print(x_train.shape) , print(y_train.shape)

print(x_test.shape) , print(y_test.shape)

# reshape input to be [sample , time_step,features]WHICH is required for LSTM
# 2 dimension se 3 dimension mai convert kiya h
x_train = x_train.reshape(x_train.shape[0],x_train.shape[1],1)
x_test = x_test.reshape(x_test.shape[0],x_test.shape[1],1)

x_train.shape , x_test.shape

from tensorflow.keras.layers import Dense,LSTM
from tensorflow.keras.models import Sequential

## create the model
model=Sequential()
model.add(LSTM(units=50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(units=50,return_sequences=True))
model.add(LSTM(units=50))
model.add(Dense(units=1))
model.compile(optimizer='adam',loss='mean_squared_error')

model.summary()

model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=100,batch_size=64,verbose=1)

## prediction
train_predict = model.predict(x_train)
test_predict = model.predict(x_test)

# transform back to original form
train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)

## calculate RSME performance metrics
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,train_predict))

##plotting
## shift train prediction for plotting
look_back=100
trainpredictplot = np.empty_like(df1)
trainpredictplot[: , :] = np.nan
trainpredictplot[look_back : len(train_predict)+look_back , :] = train_predict  

##shift test prediction for plotting
testpredictplot = np.empty_like(df1)
testpredictplot[:,:]= np.nan
testpredictplot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict

##plotting baseline and prediction
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainpredictplot)
plt.plot(testpredictplot)
plt.show()

len(test_data)

x_input = test_data[341 : ].reshape(1,-1)
x_input.shape

temp_input = list(x_input)
temp_input =temp_input[0].tolist()

temp_input

# demonstrate prediction for next 10 days
from numpy import array

lst_output=[]
n_steps=100
i=0
while(i<30):
    
    if(len(temp_input)>100):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
    

print(lst_output)

day_new = np.arange(1,100)
day_pred = np.arange(101,131)

len(df1)

plt.plot(day_new , scaler.inverse_transform(df1[1158:]))
plt.plot(day_pred , scaler.inverse_transform(lst_output))
plt.show()

df3 =   df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])

df3 =scaler.inverse_transform(df3).tolist()

plt.plot(df3)

